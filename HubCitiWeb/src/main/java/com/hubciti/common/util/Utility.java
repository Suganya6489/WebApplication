package com.hubciti.common.util;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.mail.MessagingException;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.io.IOUtils;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.hubciti.common.constatns.ApplicationConstants;
import com.hubciti.common.exception.HubCitiServiceException;
import com.hubciti.common.pojo.Event;
import com.hubciti.common.pojo.GAddress;
import com.hubciti.common.pojo.RetailLocation;
import com.hubciti.common.pojo.ScreenSettings;
import com.hubciti.common.pojo.User;
import com.hubciti.common.tags.Pagination;

import common.email.EmailComponent;
import common.util.MailBean;

public class Utility {
	private static final Logger LOG = LoggerFactory.getLogger(Utility.class);

	public static final String autoGeneratedPswd = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

	public static boolean validImageDimension(int height, int width, InputStream image) throws IOException {
		final String methodName = "validDimension";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		BufferedImage img = ImageIO.read(image);
		int w = img.getWidth(null);
		int h = img.getHeight(null);
		LOG.info("Image Width*********" + w);
		LOG.info("Image Hieght*********" + h);
		if (w == width && h == height) {
			return true;
		}
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return false;
	}

	public static boolean validMinDimension(int height, int width, InputStream image) throws IOException {
		final String methodName = "validDimension";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		BufferedImage img = ImageIO.read(image);
		int w = img.getWidth(null);
		int h = img.getHeight(null);
		LOG.info("Image Width*********" + w);
		LOG.info("Image Hieght*********" + h);
		if (w > width || h > height) {
			return true;
		}
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return false;
	}

	public static String writeFileData(CommonsMultipartFile file, String destinationPath) throws HubCitiServiceException {
		final String methoName = "writeFileData";
		LOG.info(ApplicationConstants.METHODSTART + methoName);
		InputStream inputStream = null;
		OutputStream outputStream = null;
		CommonsMultipartFile commonsMultipartFile = null;
		commonsMultipartFile = file;
		// byte[] buffer=file.getFileData();
		byte[] buffer = new byte[32];

		if (commonsMultipartFile.getSize() > 0) {
			// destinationPath=file.getFilePath();
			String outputPath = destinationPath;
			try {
				LOG.info("Content Type : " + file.getContentType());
				if (file.getContentType().contains("image/")) {
					String extension = FilenameUtils.getExtension(destinationPath);
					if (!isEmptyOrNullString(extension)) {
						if (!"png".equals(extension)) {
							outputPath = FilenameUtils.removeExtension(destinationPath);

							if (!isEmptyOrNullString(outputPath)) {
								outputPath = outputPath + ".png";
							}
						}
					}
				}
				LOG.info("Output path in writeFileData method :" + outputPath);
				outputStream = new FileOutputStream(outputPath);
				inputStream = commonsMultipartFile.getInputStream();
				while (inputStream.read(buffer) != -1) {
					outputStream.write(buffer);
				}

				LOG.info("File has been successfully written to " + outputPath);
			} catch (FileNotFoundException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			catch (IOException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			finally {
				if (outputStream != null) {
					try {
						outputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}
				}
				if (inputStream != null) {
					try {
						inputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}

				}
			}

		}
		LOG.info(ApplicationConstants.METHODEND + methoName);
		return "success";

	}

	public static String writeFileData(InputStream inputStream, String destinationPath) throws HubCitiServiceException {
		final String methoName = "writeFileData";
		LOG.info(ApplicationConstants.METHODSTART + methoName);
		OutputStream outputStream = null;

		// byte[] buffer=file.getFileData();
		byte[] buffer = new byte[32];

		// destinationPath=file.getFilePath();

		try {
			outputStream = new FileOutputStream(destinationPath);

			while (inputStream.read(buffer) != -1) {
				outputStream.write(buffer);
			}
		} catch (FileNotFoundException exception) {
			LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
			throw new HubCitiServiceException(exception.getMessage(), exception);
		} catch (IOException exception) {
			LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
			throw new HubCitiServiceException(exception.getMessage(), exception);
		} finally {
			if (outputStream != null) {
				try {
					outputStream.close();
				} catch (IOException exception) {
					LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
					throw new HubCitiServiceException(exception.getMessage(), exception);
				}
			}
			if (inputStream != null) {
				try {
					inputStream.close();
				} catch (IOException exception) {
					LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
					throw new HubCitiServiceException(exception.getMessage(), exception);
				}
			}
		}
		LOG.info(ApplicationConstants.METHODEND + methoName);
		return "success";
	}

	/**
	 * This method is used to check Empty strings or "".
	 * 
	 * @param arg
	 *            -As parameter
	 * @return arg
	 */
	public static boolean isEmptyOrNullString(String arg) {

		final String methodName = "isEmptyString";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		final boolean emptyString;

		if (null == arg || "".equals(arg.trim())) {
			emptyString = true;
		} else {
			emptyString = false;
		}
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return emptyString;
	}

	public static StringBuilder getTempMediaPath(String folderType) {
		String jbossPath = System.getenv(ApplicationConstants.JBOSS_HOME);
		String fileSeparator = System.getProperty("file.separator");
		StringBuilder mediaPathBuilder = new StringBuilder();
		mediaPathBuilder.append(jbossPath);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.STANDALONE);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.DEPLOYMENT);
		mediaPathBuilder.append(fileSeparator);
		/*
		 * mediaPathBuilder.append(ApplicationConstants.DEPLOY);
		 * mediaPathBuilder.append(fileSeparator);
		 */
		/*
		 * mediaPathBuilder.append(ApplicationConstants.SERVER);
		 * mediaPathBuilder.append(fileSeparator);
		 * mediaPathBuilder.append(ApplicationConstants.DEFAULT);
		 * mediaPathBuilder.append(fileSeparator);
		 * mediaPathBuilder.append(ApplicationConstants.DEPLOY);
		 * mediaPathBuilder.append(fileSeparator);
		 */

		mediaPathBuilder.append(ApplicationConstants.ROOTWAR);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.IMAGES);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(folderType);
		File obj = new File(mediaPathBuilder.toString());
		if (!obj.exists()) {
			obj.mkdir();
		}
		return mediaPathBuilder;
	}

	public static StringBuilder getMediaPath(String folderType, int fodlerID) {
		String jbossPath = System.getenv(ApplicationConstants.JBOSS_HOME);
		String fileSeparator = System.getProperty("file.separator");
		StringBuilder mediaPathBuilder = new StringBuilder();
		mediaPathBuilder.append(jbossPath);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.STANDALONE);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.DEPLOYMENT);
		mediaPathBuilder.append(fileSeparator);

		/*
		 * mediaPathBuilder.append(ApplicationConstants.DEPLOY);
		 * mediaPathBuilder.append(fileSeparator);
		 */

		/*
		 * mediaPathBuilder.append(ApplicationConstants.SERVER);
		 * mediaPathBuilder.append(fileSeparator);
		 * mediaPathBuilder.append(ApplicationConstants.DEFAULT);
		 * mediaPathBuilder.append(fileSeparator);
		 * mediaPathBuilder.append(ApplicationConstants.DEPLOY);
		 * mediaPathBuilder.append(fileSeparator);
		 */

		mediaPathBuilder.append(ApplicationConstants.ROOTWAR);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.IMAGES);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(folderType);
		File obj = new File(mediaPathBuilder.toString());
		if (!obj.exists()) {
			obj.mkdir();
		}
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(fodlerID);
		obj = new File(mediaPathBuilder.toString());
		if (!obj.exists()) {
			obj.mkdir();
		}
		return mediaPathBuilder;
	}

	public static BufferedImage getBufferedImageForMinDimension(InputStream inputStream, String realPath, String fileName, String flowpath)
			throws IOException {

		LOG.info("getBufferedImageForMinDimensionrealPath : " + realPath);
		BufferedImage image = null;

		if (null != inputStream && !isEmptyOrNullString(fileName) && !isEmptyOrNullString(realPath)) {
			/*
			 * File whiteBackground = new
			 * File(realPath+"/White_BackGround.png"); int imposeImgpixel = 120;
			 * if(!isEmptyOrNullString(flowpath)) {
			 * if(flowpath.equalsIgnoreCase("WelcomePage") ||
			 * flowpath.equalsIgnoreCase("Banner")) { whiteBackground = new
			 * File(realPath+"/White_BackGround_WelcomePage.png");
			 * imposeImgpixel = 250; } }
			 */

			BufferedImage small = ImageIO.read(inputStream);
			int hPixel = small.getHeight();
			int wPixel = small.getWidth();

			int imposeImgWpixel = 430;
			int imposeImgHpixel = 455;
			int imageType;
			File whiteBackground = new File(realPath + "/White_BackGround.png");
			BufferedImage img1 = ImageIO.read(whiteBackground);

			// some time imagetype was returning 0.

			if (img1.getType() == 0) {
				imageType = 5;
			} else {
				imageType = img1.getType();
			}

			// imageType = img1.getType();
			BufferedImage large = resizeImage(img1, imageType, wPixel + 1000, hPixel + 1000);
			// ImageIO.write(resizeImagePng, "png", new
			// File(realPath+"/White_BackGround.png"));

			// File updateWhiteBackground = new
			// File(realPath+"/White_BackGround.png");
			// BufferedImage large = ImageIO.read(updateWhiteBackground);
			// BufferedImage small = ImageIO.read(inputStream);
			int w = large.getWidth();
			int h = large.getHeight();
			int type = BufferedImage.TYPE_INT_RGB;
			image = new BufferedImage(w, h, type);
			Graphics2D g2 = image.createGraphics();
			g2.drawImage(large, 0, 0, null);
			g2.drawImage(small, imposeImgWpixel, imposeImgHpixel, null);
			g2.dispose();
			ImageIO.write(image, "png", new File(fileName));
		}
		return image;
	}

	private static BufferedImage resizeImage(BufferedImage originalImage, int type, int wPixel, int hPixel) {

		BufferedImage resizedImage = new BufferedImage(wPixel, hPixel, type);
		Graphics2D g = resizedImage.createGraphics();
		g.drawImage(originalImage, 0, 0, wPixel, hPixel, null);
		g.dispose();

		return resizedImage;
	}

	public static String writeImage(BufferedImage file, String destinationPath) throws HubCitiServiceException {
		final String methoName = "writeImage";
		LOG.info(ApplicationConstants.METHODSTART + methoName);
		InputStream inputStream = null;
		OutputStream outputStream = null;

		// byte[] buffer=file.getFileData();
		// byte[] buffer = new byte[32];

		if (null != file) {
			// destinationPath=file.getFilePath();
			String outputPath = destinationPath;
			try {
				// LOG.info("Content Type : " + file.getContentType());
				// if (file.getContentType().contains("image/"))
				// {
				String extension = FilenameUtils.getExtension(destinationPath);
				if (!isEmptyOrNullString(extension)) {
					if (!"png".equals(extension)) {
						outputPath = FilenameUtils.removeExtension(destinationPath);

						if (!isEmptyOrNullString(outputPath)) {
							outputPath = outputPath + ".png";
						}
					}
					// }
				}
				LOG.info("Output path in writeFileData method :" + outputPath);
				outputStream = new FileOutputStream(outputPath);
				// inputStream = file.getInputStream();
				/*
				 * while (inputStream.read(buffer) != -1) {
				 * outputStream.write(buffer); }
				 */
				ImageIO.write(file, "PNG", outputStream);
			} catch (FileNotFoundException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			catch (IOException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			finally {
				if (outputStream != null) {
					try {
						outputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}
				}
				if (inputStream != null) {
					try {
						inputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}

				}
			}

		}
		LOG.info(ApplicationConstants.METHODEND + methoName);
		return "success";

	}

	public static String writeCroppedFileData(CommonsMultipartFile file, String sourcePath, String destinationPath, int xPixel, int yPixel,
			int wPixel, int hPixel) throws HubCitiServiceException {
		final String methoName = "writeCroppedFileData";
		LOG.info(ApplicationConstants.METHODSTART + methoName);
		InputStream inputStream = null;
		OutputStream outputStream = null;
		// CommonsMultipartFile commonsMultipartFile = null;
		// commonsMultipartFile = file;
		// byte[] buffer=file.getFileData();
		byte[] buffer = new byte[32];

		if (file.getSize() > 0) {
			String fileName = file.getFileItem().getName();
			try {
				File sourceimage = new File(sourcePath);

				BufferedImage outImage = ImageIO.read(sourceimage);
				BufferedImage cropped = outImage.getSubimage(xPixel, yPixel, wPixel, hPixel);

				ByteArrayOutputStream os = new ByteArrayOutputStream();
				// ImageIO.write(cropped, "png", os);

				int type = cropped.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : cropped.getType();

				BufferedImage resizeImagePng = resizeImage(cropped, type, wPixel, hPixel);

				ImageIO.write(resizeImagePng, "png", os);

				inputStream = new ByteArrayInputStream(os.toByteArray());
				String outputPath = destinationPath;
				outputPath = FilenameUtils.removeExtension(destinationPath);

				if (!isEmptyOrNullString(outputPath)) {
					outputPath = outputPath + ".png";
				}

				LOG.info("OutputPath : " + outputPath);

				outputStream = new FileOutputStream(outputPath);
				// inputStream = commonsMultipartFile.getInputStream();
				while (inputStream.read(buffer) != -1) {
					outputStream.write(buffer);
				}
			} catch (FileNotFoundException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			catch (IOException exception) {
				LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
				throw new HubCitiServiceException(exception.getMessage(), exception);
			}

			finally {
				if (outputStream != null) {
					try {
						outputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}
				}
				if (inputStream != null) {
					try {
						inputStream.close();
					} catch (IOException exception) {
						LOG.error("Exception Occurred in writeFileData {}", exception.getMessage());
						throw new HubCitiServiceException(exception.getMessage(), exception);
					}

				}
			}

		}
		LOG.info(ApplicationConstants.METHODEND + methoName);
		return "success";

	}

	/**
	 * Method to Check if the String object is null
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkNull(String strValue) {
		if (null == strValue || "null".equals(strValue) || "".equals(strValue) || "undefined".equals(strValue)) {
			return "";
		} else {
			return strValue.trim();
		}
	}

	public static String formPrivacyPolicyHTML() {
		String strResponse = null;

		return strResponse;
	}

	// used for generating auto generator password
	public static String randomString(int len) {

		Random rnd = new Random();
		StringBuilder sb = new StringBuilder(len);
		for (int i = 0; i < len; i++)
			sb.append(autoGeneratedPswd.charAt(rnd.nextInt(autoGeneratedPswd.length())));
		return sb.toString();
	}

	public static String sendMailForgetPassword(User objUsers, String smtpHost, String smtpPort, String strFromEmailId, String strLogoImage,
			String strAutoPwd) throws HubCitiServiceException {
		LOG.info(ApplicationConstants.METHODSTART + "sendMailForgetPassword");
		String strToMailId = objUsers.getEmailId();
		String strSubject = ApplicationConstants.SUBJECT_MSG_FOR_FORGOTPWD_MAILSEND;
		String strResponse = null;
		String strContent = null;
		String autogenpswd = strAutoPwd;
		String strloginusername = objUsers.getUserName();

		strContent = "<Html>Hi " + strloginusername + "," + "<br/><br/>" + ApplicationConstants.CONTENT_MSG_FOR_FORGOTPWD_MAILSEND
				+ "<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UserName : <b>" + strloginusername
				+ "</b><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password : <b>" + autogenpswd + "</b><br/><br/>" + " Regards,<br/>ScanSee Team <br/>"
				+ " <img src= " + strLogoImage + " alt=\"scansee logo\"  border=\"0\"></Html>";
		LOG.info("Inside Utility : strContent : " + strContent);
		try {
			EmailComponent.sendMailWithOutAttachmentWithoutCC(strFromEmailId, strToMailId, strSubject, strContent, smtpHost, smtpPort);
			strResponse = ApplicationConstants.SUCCESS;
		} catch (MessagingException me) {
			LOG.info("Inside Utility : sendMailForgetPassword : " + me.getMessage());
			throw new HubCitiServiceException(me);
		}
		LOG.info(ApplicationConstants.METHODEND + "sendMailForgetPassword");
		return strResponse;
	}

	public static String generatePrivacyPolicyHtml(String title, String content, String bgColor, String fontColor) {

		final String methodName = "generatePrivacyPolicyHtml";
		LOG.info(ApplicationConstants.METHODSTART + methodName);

		StringBuffer stringBuffer = new StringBuffer();

		stringBuffer
				.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
						+ "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
						+ "<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />"
						+ "<title>ScanSee:HubCiti</title><link rel=\"stylesheet\" type=\"text/css\" href=\"/HubCiti/styles/styles.css\" />"
						+ "<script type=\"text/javascript\" src=\"/HubCiti/scripts/jquery-1.10.2.js\"></script>"
						+ "<script type=\"text/javascript\">" + "$(document).ready(function() {");
		stringBuffer.append("$('body').css(\"background-color\"," + "\"" + bgColor + "\");");
		stringBuffer.append("$(\"#iphone-priPolicy-preview\").css(\"background-color\"," + "\"" + bgColor + "\");");
		stringBuffer.append("$(\"#iphone-preview\").css(\"background-color\"," + "\"" + bgColor + "\");");
		stringBuffer.append("$(\"#iphone-priPolicy-preview\").css(\"color\"," + "\"" + fontColor + "\");");
		stringBuffer.append("$(\"#iphone-priPolicy-preview h1\").css(\"color\"," + "\"" + fontColor + "\");});");
		stringBuffer.append("</script></head>");
		stringBuffer.append("</script></head>");

		stringBuffer.append("<body><div id=\"iphone-preview\"><div id=\"iphone-priPolicy-preview\">"
				+ "<div class=\"previewAreaScroll\"><div class=\"iPhone-preview-container\">"
				+ "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">" + "<tr><td align=\"center\"><h2>");

		stringBuffer.append(title);

		stringBuffer
				.append("</h2></td></tr><tr><td class=\"star-font\" align=\"center\">************************************</td>" + "</tr><tr><td>");

		stringBuffer.append(content);

		stringBuffer.append("</td></tr></table>");
		stringBuffer.append("</div></div></div>	</div></body></html>");

		LOG.info(ApplicationConstants.METHODEND + methodName);

		return stringBuffer.toString();

	}

	public static String generateAboutUsHtml(String imagePath, String content, String version) {

		final String methodName = "generateAboutUsHtml";
		LOG.info(ApplicationConstants.METHODSTART + methodName);

		StringBuffer stringBuffer = new StringBuffer();

		stringBuffer
				.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
						+ "<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />"
						+ "<title>ScanSee:HubCiti</title><link rel=\"stylesheet\" type=\"text/css\" href=\"/HubCiti/styles/styles.css\" />"
						+ "</head><body class=\"ctmhtmlbk\"><div id=\"iphone-preview-mob\"><div id=\"iphone-aboutus-preview\"><div>"
						+ "<div class=\"iPhone-preview-container\"><table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr>");

		stringBuffer.append("<td align=\"center\"><div class=\"min-margin-btm-top\"><img src=\"");

		stringBuffer.append(imagePath);

		stringBuffer
				.append("\" width=\"220\" height=\"50\"	alt=\"Image\" /></div></td></tr>" + "<tr><td align=\"center\"><span class=\"font-bold\">");
		stringBuffer.append(version);
		stringBuffer.append("</span></td></tr><tr><td><p class=\"min-margin-btm-top\">");
		stringBuffer.append(content);
		stringBuffer.append("</tr></table><div style=\"margin: 10px 0 0 0; vertical-align: middle;\">Powered By");
		stringBuffer.append("<span style=\"display: inline-block;height: 32px;margin-left: 8px;vertical-align: middle;width: 46px;\">");
		stringBuffer.append("<img width=\"46\" height=\"32\" src=\"/Images/poweredByLogo.png\" alt=\"ScanSee\"></span></div>");
		stringBuffer.append("</div></div></div></div></body></html>");
		LOG.info(ApplicationConstants.METHODEND + methodName);

		return stringBuffer.toString();

	}

	public static StringBuilder getHTMLMediaPath(String folderType, String fodlerID) {
		String jbossPath = System.getenv(ApplicationConstants.JBOSS_HOME);
		String fileSeparator = System.getProperty("file.separator");
		StringBuilder mediaPathBuilder = new StringBuilder();
		mediaPathBuilder.append(jbossPath);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.STANDALONE);
		mediaPathBuilder.append(fileSeparator);
		mediaPathBuilder.append(ApplicationConstants.DEPLOYMENT);
		mediaPathBuilder.append(fileSeparator);
		/*
		 * mediaPathBuilder.append(ApplicationConstants.DEPLOY);
		 * mediaPathBuilder.append(fileSeparator);
		 */
		mediaPathBuilder.append(ApplicationConstants.ROOTWAR);
		mediaPathBuilder.append(fileSeparator);

		mediaPathBuilder.append(ApplicationConstants.IMAGES);
		mediaPathBuilder.append(fileSeparator);

		mediaPathBuilder.append(ApplicationConstants.HUBCITI);
		mediaPathBuilder.append(fileSeparator);

		mediaPathBuilder.append(folderType);
		File obj = new File(mediaPathBuilder.toString());
		if (!obj.exists()) {
			obj.mkdir();
		}
		/*
		 * mediaPathBuilder.append(fileSeparator);
		 * mediaPathBuilder.append(fodlerID); obj = new
		 * File(mediaPathBuilder.toString()); if (!obj.exists()) { obj.mkdir();
		 * }
		 */
		return mediaPathBuilder;
	}

	/**
	 * This method is used for validating password.
	 * 
	 * @param strPassword
	 * @return
	 */
	public static boolean validatePassword(String strPassword) {
		boolean returnVal = true;
		if (strPassword != null) {
			if (!"".equals(strPassword)) {
				Pattern pattern = Pattern.compile(ApplicationConstants.DIGIT);
				Matcher matcher = pattern.matcher(strPassword);
				returnVal = matcher.matches();
			}
		}

		return returnVal;
	}

	public static boolean validateURL( String strUrlLink) {
		Pattern pattern = null;
		Matcher matcher;
		if (!"".equals(Utility.checkNull(strUrlLink))) {
			strUrlLink = strUrlLink.trim();
			pattern = Pattern.compile(ApplicationConstants.URL_PATTERN);
			matcher = pattern.matcher(strUrlLink);
			return matcher.matches();
		}
		return true;
	}

	public static String uploadMediaFiles(ScreenSettings objScreenSettings, int iHubCitiID) throws HubCitiServiceException {
		LOG.info("Inside Utility : uploadMediaFiles ");
		String response = ApplicationConstants.SUCCESS;
		String fileName = null;
		String fileExtn = null;
		// ZipEntry zipentry = null;
		// ZipInputStream zipInputStream = null;
		int dotIndex;
		String zipFilepath = null;
		long twoGBinBytes = 2147483648L;
		try {
			StringBuilder mediaPathBuilder = getMediaPath(ApplicationConstants.HUBCITI, iHubCitiID);
			String suppMediaPath = mediaPathBuilder.toString();
			CommonsMultipartFile imageFile = objScreenSettings.getFilePaths();
			if (null != imageFile) {
				if (imageFile.getSize() > 0) {
					if (imageFile.getSize() <= twoGBinBytes) {
						fileName = imageFile.getOriginalFilename();
						dotIndex = fileName.lastIndexOf(".");
						fileExtn = fileName.substring(dotIndex + 1, fileName.length());
						zipFilepath = suppMediaPath + "/" + imageFile.getOriginalFilename();
						Utility.writeFileData(imageFile, zipFilepath);

					} else {
						response = "Please Select a file less than 2GB";
					}
				}
			}
		} catch (HubCitiServiceException e) {
			LOG.info("Inside  Utility : uploadMediaFiles : " + e);
			response = ApplicationConstants.FAILURE;
		}
		return response;
	}

	/**
	 * main method
	 * 
	 * @param args
	 */

	public static Pagination getPagination(long totalSize, int currentPage, String url, int pageSize) {
		Pagination objPage = new Pagination();
		objPage.setTotalSize(totalSize);
		objPage.setCurrentPage(currentPage);
		objPage.setPageRange(pageSize);
		objPage.setUrl(url);
		return objPage;
	}

	public static Date getFormattedCurrentDate() {
		final String methodName = "getFormattedDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);

		final Date date = new Date();
		Date parsedUtilDate = null;
		try {
			final DateFormat formater = new SimpleDateFormat("MM-dd-yyyy");
			parsedUtilDate = formater.parse(formater.format(date));
		} catch (ParseException exception) {
			LOG.info("Exception in convertDBdate method" + exception.getMessage());
			// return ApplicationConstants.NOTAPPLICABLE;
		}

		LOG.info(ApplicationConstants.METHODEND + methodName);
		return parsedUtilDate;
	}

	/**
	 * This method is used for comparing current date.
	 * 
	 * @param fromDate
	 * @param currentDate
	 * @return
	 * @throws ScanSeeServiceException
	 */
	public static String compareCurrentDate(String fromDate, Date currentDate) throws HubCitiServiceException {
		Date startDate;
		int result = 0;
		String comResult = null;
		// DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		try {
			DateFormat oldFormatter = new SimpleDateFormat("MM/dd/yyyy");
			// DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			startDate = (Date) oldFormatter.parse(fromDate);
			// endDate = (Date) oldFormatter.parse(getFormattedCurrentDate());
			result = startDate.compareTo(getFormattedCurrentDate());
			if (result < 0)
				comResult = ApplicationConstants.DATEAFTER;
		} catch (ParseException e) {
			throw new HubCitiServiceException(e.getMessage());
		} catch (Exception e) {
			throw new HubCitiServiceException(e.getMessage());
		}
		return comResult;
	}

	/**
	 * THis method is used to compare date.
	 * 
	 * @param fromDate
	 * @param toDate
	 * @return
	 * @throws ScanSeeServiceException
	 */
	public static String compareDate(String fromDate, String toDate) throws HubCitiServiceException {
		// DateFormat formatter;
		Date startDate;
		Date endDate;
		int result = 0;
		String comResult = null;
		DateFormat oldFormatter = new SimpleDateFormat("MM/dd/yyyy");
		try {
			if (!isEmptyOrNullString(fromDate) && !isEmptyOrNullString(toDate)) {
				startDate = (Date) oldFormatter.parse(fromDate);
				endDate = (Date) oldFormatter.parse(toDate);
				result = endDate.compareTo(startDate);
				if (result < 0)
					comResult = ApplicationConstants.DATEAFTER;
			}
		} catch (ParseException e) {
			throw new HubCitiServiceException(e.getMessage());
		} catch (Exception e) {
			throw new HubCitiServiceException(e.getMessage());
		}
		return comResult;
	}

	/**
	 * getFormattedDate method will convert date format to yyyy-MM-dd.
	 * 
	 * @param enteredDate
	 *            As input parameter
	 * @return converted date.
	 * @throws java.text.ParseException
	 *             Exception while parsing date.
	 */

	public static String getFormattedDate(String enteredDate) throws java.text.ParseException {
		final String methodName = "getFormattedDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		DateFormat oldFormatter = new SimpleDateFormat("MM/dd/yyyy");
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

		Date convertedDate = (Date) oldFormatter.parse(enteredDate);
		String cDate = formatter.format(convertedDate);
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return cDate;
	}

	/**
	 * getFormattedDate method will convert date format to MM/dd/yyyy.
	 * 
	 * @param enteredDate
	 *            As input parameter
	 * @return converted date.
	 * @throws java.text.ParseException
	 *             Exception while parsing date.
	 */

	public static String formattedDate(String enteredDate) throws java.text.ParseException {
		final String methodName = "formattedDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);

		DateFormat oldFormatter = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");

		Date convertedDate = (Date) oldFormatter.parse(enteredDate);
		String cDate = formatter.format(convertedDate);
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return cDate;
	}

	/**
	 * THis method is used to format date with time.
	 * 
	 * @param enteredDate
	 * @return
	 * @throws java.text.ParseException
	 */
	public static String formattedDateWithTime(String enteredDate) throws java.text.ParseException {
		final String methodName = "formattedDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
	
		DateFormat oldFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");

		Date convertedDate = (Date) oldFormatter.parse(enteredDate);
		String cDate = formatter.format(convertedDate);
		LOG.info(ApplicationConstants.METHODEND + methodName);
		return cDate;
	}

	/**
	 * getFormattedDate method will convert date format to yyyy-MM-dd.
	 * 
	 * @param enteredDate
	 *            As input parameter
	 * @return converted date.
	 * @throws java.text.ParseException
	 *             Exception while parsing date.
	 */

	public static String getFormattedDateTime(String enteredDate) throws java.text.ParseException {
		final String methodName = "getFormattedDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		String cDate = null;
		DateFormat oldFormatter = new SimpleDateFormat("MM/dd/yyyy");
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		if (null != enteredDate && !"".equals(enteredDate)) {
			Date convertedDate = (Date) oldFormatter.parse(enteredDate);
			cDate = formatter.format(convertedDate);

		}

		LOG.info(ApplicationConstants.METHODEND + methodName);
		return cDate;
	}

	/**
	 * This controller method return sorted time(Start and end hrs).
	 * 
	 * @param unsortMap
	 *            instance of Map interface
	 * @return sortedMap map object.
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static Map sortByComparator(Map unsortMap) {
		final List list = new LinkedList(unsortMap.entrySet());
		// sort list based on comparator
		Collections.sort(list, new Comparator() {
			public int compare(Object o1, Object o2) {
				return ((Comparable) ((Map.Entry) o1).getValue()).compareTo(((Map.Entry) o2).getValue());
			}
		});
		// put sorted list into map again
		final Map sortedMap = new LinkedHashMap();
		Map.Entry entry = null;
		for (final Iterator it = list.iterator(); it.hasNext();) {
			entry = (Map.Entry) it.next();
			sortedMap.put(entry.getKey(), entry.getValue());
		}
		return sortedMap;
	}

	public static boolean isValidDate(String date) {
		final String methodName = "isValidDate";
		LOG.info(ApplicationConstants.METHODSTART + methodName);
		Date testDate = null;
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

		try {
			testDate = sdf.parse(date);
			if (!sdf.format(testDate).equals(date)) {
				return false;
			} else {
				return true;
			}

		} catch (ParseException e) {

			return false;
		}

	}

	/**
	 * This method is used for converting json to object list.
	 * 
	 * @param jsonStr
	 * @return
	 */
	public static List<RetailLocation> jsonToObjectList(String jsonStr) {

		final String methodName = "jsonToObjectList";
		LOG.info("methodName" + methodName);
		Event hotelListJson = new Event();
		try {
			ObjectMapper om = new ObjectMapper();
			hotelListJson = om.readValue(jsonStr.getBytes(), Event.class);
			LOG.info("Size " + hotelListJson.getHotelList().size());
		} catch (JsonMappingException e) {
			LOG.error(ApplicationConstants.EXCEPTIONOCCURRED + methodName + e.getStackTrace());
		} catch (Exception e) {
			LOG.error(ApplicationConstants.EXCEPTIONOCCURRED + methodName + e.getStackTrace());
		}
		return hotelListJson.getHotelList();

	}

	public static GAddress getGeoDetails(String address) {
		// String ADDRESS = "10616 Mellow Meadows,Austin,TX";
		String DEFAULT_KEY = "";
		String URL = "http://maps.googleapis.com/maps/api/geocode/json?&sensor=false&components=country:US";
		URL url;
		GAddress geoDetails = null;
		try {
			url = new URL(URL + "&address=" + URLEncoder.encode(address));
			URLConnection conn = url.openConnection();
			StringWriter sw = new StringWriter();
			IOUtils.copy(conn.getInputStream(), sw);
			System.out.println("sw " + sw.toString());
			geoDetails = processResult(sw.toString());
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			LOG.error(ApplicationConstants.EXCEPTIONOCCURRED + e.getStackTrace());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			LOG.error(ApplicationConstants.EXCEPTIONOCCURRED + e.getStackTrace());
		}
		return geoDetails;

	}

	public static GAddress processResult(String response) {
		JSONObject json;
		GAddress gaddr = new GAddress();
		try {
			json = new JSONObject(response.toString());
			JSONArray resultArray = json.getJSONArray("results");
			if (resultArray != null && resultArray.length() > 0) {

				JSONObject resultObj = (JSONObject) resultArray.getJSONObject(0);
				JSONObject geometryObj = resultObj.getJSONObject("geometry");
				if (geometryObj != null) {
					String locationType = geometryObj.getString("location_type");
					String latStr = geometryObj.getJSONObject("location").getString("lat");
					String lngStr = geometryObj.getJSONObject("location").getString("lng");
					if (latStr != null && lngStr != null) {

						gaddr.setLat(Double.parseDouble(latStr));
						gaddr.setLng(Double.parseDouble(lngStr));
					}
					gaddr.setAddrReturned(resultObj.getString("formatted_address"));
					gaddr.setLocationType(locationType);

					System.out.println("lat and lng " + latStr + "  " + lngStr);
					System.out.println("location_type " + locationType);
					System.out.println("location type " + resultObj.getString("formatted_address"));
					System.out.println("status " + json.getString("status"));
				}
			}
			gaddr.setStatus(json.getString("status"));

		} catch (ParseException e) {
			// TODO Auto-generated catch block
			LOG.error(ApplicationConstants.EXCEPTIONOCCURRED + e.getStackTrace());
		}

		return gaddr;

	}

	/**
	 * Method to Check if the String object is null
	 * 
	 * @param strValue
	 *            String
	 * @return strValue String
	 */
	public static String checkNull(Object strValue) {
		if ( null == strValue || "null".equals(strValue.toString()) || "undefined".equals(strValue)) {
			return "";
		} else {
			return strValue.toString().trim();
		}
	}

	public static String generateHTMLFile(String data, String destinationPath) throws HubCitiServiceException {
		final String methoName = "generateHTMLFile";
		LOG.info(ApplicationConstants.METHODSTART + methoName);

		FileWriter fileWriter = null;

		try {
			fileWriter = new FileWriter(destinationPath);
			fileWriter.write(data);
			fileWriter.close();
		} catch (FileNotFoundException exception) {
			LOG.error("Exception Occurred in generateHTMLFile {}", exception.getStackTrace());
			throw new HubCitiServiceException(exception.getMessage(), exception);
		} catch (IOException exception) {
			LOG.error("Exception Occurred in generateHTMLFile {}", exception.getStackTrace());
			throw new HubCitiServiceException(exception.getMessage(), exception);
		}

		LOG.info(ApplicationConstants.METHODEND + methoName);
		return "success";
	}
	
	/**
	 * HubCiti admin creation Success mail .
	 * 
	 * @param citi
	 * @param smtpHost
	 * @param smtpPort
	 * @throws ScanSeeServiceException
	 * @throws MessagingException
	 */
	public static String sendMailHubCitiLoginSuccess(User user,User loginUser ,String smtpHost, String smtpPort, String strAdminEmailId, String strLogoImage)
			throws HubCitiServiceException {
		LOG.info("Inside Utility : sendMailRetailerLoginSuccess ");
		String strToMailId = user.getEmailId();
		String strSubject = ApplicationConstants.SUBJECT_MSG_FOR_SUCCESS_REGISTRATION;
		String respone = null;
		String autogenpswd = user.getPassword();
		String strloginusername = user.getUserName();
		String userlogin = user.getUserName();
		final StringBuffer emailTemplate = new StringBuffer("<html><head></head>");
		emailTemplate.append("<body>\n");
		emailTemplate.append("<table width= \"100%\">");
		emailTemplate.append("<tr>");
		emailTemplate.append("<td colspan=\"2\">Hi <span>" + strloginusername + " ,</span></td>");
		emailTemplate.append("</tr>");
		emailTemplate.append("<br/>");
		emailTemplate.append("<tr><td colspan=\"2\"><p>" + "You have been successfully created as Event User for <b> " + loginUser.getUserName()
				+ "</b>. Please find the username and  auto generated password to login." + "</p></td></tr>");
		emailTemplate.append("<tr><td width=\"5%\">UserName:" + "</td>");
		emailTemplate.append("<td width=\"95%\"><strong>" + userlogin + "</strong></td></tr>");
		emailTemplate.append("<tr><td width=\"5%\">Password:" + "</td>");
		emailTemplate.append("<td width=\"95%\"><strong>" + autogenpswd + "</strong></td></tr>");
		emailTemplate.append("<tr><td colspan=\"2\"><a href=\"" + user.getHubCitiUrl() + "\">" + "Click here to login" + "</a></td></tr>");
		emailTemplate.append("<tr><td colspan=\"2\">&nbsp;" + "</td></tr>");
		emailTemplate.append("<tr><td colspan=\"2\">" + "Regards," + "</td></tr>");
		emailTemplate.append("<tr><td colspan=\"2\">" + "ScanSee Team" + "</td></tr><br/>");
		emailTemplate.append("<img src= " + strLogoImage + " alt=\"scansee logo\"  border=\"0\"><br/>");
		emailTemplate.append("</table>");
		emailTemplate.append("</body>");
		emailTemplate.append("</html>\n");
		LOG.info("In Retailer HTML Body" + emailTemplate.toString());
		try {
			MailBean.mailingComponent(strAdminEmailId, strToMailId, strSubject, emailTemplate.toString(), smtpHost, smtpPort);
			respone = ApplicationConstants.SUCCESS;
		} catch (MessagingException me) {
			LOG.info("Inside Utility : sendMailRetailerLoginSuccess : " + me.getMessage());
		}
		return respone;
	}
	
	/**
	 * Validate Email Id with regular expression
	 * 
	 * @param strEmailId
	 *            strEmailId for validation
	 * @return true valid strEmailId, false invalid strEmailId
	 */
	public static boolean validateEmailId(final String strEmailId) {

		Pattern pattern = null;
		Matcher matcher;
		final String EMAIL_PATTERN = ApplicationConstants.EMAIL_PATTERN;

		pattern = Pattern.compile(EMAIL_PATTERN);
		matcher = pattern.matcher(strEmailId);
		return matcher.matches();
	}
	
	/**
     * Method to check entered value is valid price or not.
     *  
      * @param price
     * @return true or false
     */
     public static Boolean isValidPrice(String price) {
            String regex = "^[0-9]\\d*$";
            Boolean isValidPrice = true;
            if (null != price && !"".equals(price)) {
                   final Pattern pattern = Pattern.compile(regex);
                   Matcher matcher = null;
                   String[] strArr = price.split("\\.");
                   if (strArr.length == 0 || strArr.length > 2) {
                         isValidPrice = false;
                   } else {
                         for (String str : strArr) {
                                matcher = pattern.matcher(str);
                                if (!matcher.matches()) {
                                       isValidPrice = false;
                                       break;
                                }
                         }
                   }
            }
            return isValidPrice;
     }
     
     public static StringBuilder getEvtMarkerMediaPath(String folderType, int fodlerID) {
 		String jbossPath = System.getenv(ApplicationConstants.JBOSS_HOME);
 		String fileSeparator = System.getProperty("file.separator");
 		StringBuilder mediaPathBuilder = new StringBuilder();
 		mediaPathBuilder.append(jbossPath);
 		mediaPathBuilder.append(fileSeparator);
 		mediaPathBuilder.append(ApplicationConstants.STANDALONE);
 		mediaPathBuilder.append(fileSeparator);
 		mediaPathBuilder.append(ApplicationConstants.DEPLOYMENT);
 		mediaPathBuilder.append(fileSeparator);

 	 		mediaPathBuilder.append(ApplicationConstants.ROOTWAR);
 		mediaPathBuilder.append(fileSeparator);
 		mediaPathBuilder.append(ApplicationConstants.IMAGES);
 		mediaPathBuilder.append(fileSeparator);
 		mediaPathBuilder.append(folderType);
 		File obj = new File(mediaPathBuilder.toString());
 		if (!obj.exists()) {
 			obj.mkdir();
 		}
 		mediaPathBuilder.append(fileSeparator);
 		mediaPathBuilder.append(fodlerID);
 		obj = new File(mediaPathBuilder.toString());
 		if (!obj.exists()) {
 			obj.mkdir();
 		}
 		return mediaPathBuilder;
 	}
     
     public static String getImagewithDateTime(String ImgName)
     {
    	 LOG.info("Inside Utility : getImagewithDateTime ");
    	 String strConvImgName=null;
    	 String extension = FilenameUtils.getExtension(ImgName);
    	 strConvImgName= FilenameUtils.removeExtension(ImgName);
    	     	 
    	 	Date date= new Date();
			SimpleDateFormat sdf=new SimpleDateFormat("ddMMyyyyhhmmss");
			String dateString=sdf.format(date);
			strConvImgName = strConvImgName+ dateString+"."+extension;
    	 
    	 LOG.info("Inside Utility : getImagewithDateTime ");
    	 return strConvImgName;
     
     }
     
     public static void main(String a[])
     {
    	String ImgName ="ab.png" ;
    	 String strConvImgName=null;
    	 String extension = FilenameUtils.getExtension(ImgName);
    	 strConvImgName= FilenameUtils.removeExtension(ImgName);
    	     	 
    	 	Date date= new Date();
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-YYYY hh:mm:ss");
			String dateString=sdf.format(date);
			strConvImgName = strConvImgName+ dateString+"."+extension;
			System.out.println(strConvImgName);
     }
     
 	/**
 	 * Method to remove any java script in a string for Cross site scripting
 	 * issue. Here inside HTML tag (<>), any text starting with "on.." to ")" is
 	 * removed to avoid any java script executing which cause XSS issue.
 	 * Also any code inside <script>...</script> is removed including <script> tag.
 	 * 
 	 * @param String s.
 	 * @return String.
 	 */
 	public static String getXssFreeString(String s) {
 		String response = "";
 		if (s == null) {
 			return null;
 		} else if("".equals(s.trim()))	{
 			return "";
 		}

 		if (s.contains("<script>")) {
 			s = s.replaceAll("<script>.*</script>", "");
 		}

 		char[] srcCharArr = s.toCharArray();
 		int length = srcCharArr.length;
 		char[] modifiedCharArr = new char[length];
 		char[] temp = null;
 		boolean insideHtmltag = false;
 		int index = 0;

 		for (int i = 0; i < length; i++) {
 			if (srcCharArr[i] == '<') {
 				insideHtmltag = true;
 			}

 			if (insideHtmltag) {
 				int j = 0;
 				for (j = 0; j < length - i; j++) {
 					if (i + j >= length || i + j + 1 >= length) {
 						break;
 					}

 					if (srcCharArr[i + j] == 'o'
 							|| srcCharArr[i + j + 1] == 'O') {
 						if (srcCharArr[i + j + 1] == 'n'
 								|| srcCharArr[i + j + 1] == 'N') {
 							int k = 0;
 							boolean isScriptfound = false;
 							temp = new char[length - (i + j)];
 							for (k = 0; k < length - (i + j); k++) {
 								temp[k] = srcCharArr[i + j + k];
 								if (srcCharArr[i + j + k] == '>') {
 									insideHtmltag = false;
 									break;
 								} else if (srcCharArr[i + j + k] == ')') {
 									if (i + j + k + 1 < length) {
 										k++;
 									}
 									isScriptfound = true;
 									break;
 								}
 							}
 							if (!isScriptfound) {
 								for (int l = 0; l < k; l++) {
 									modifiedCharArr[index++] = temp[l];
 								}
 							}
 							j = j + k;
 						}
 					} else if (srcCharArr[i + j] == '>') {
 						insideHtmltag = false;
 						break;
 					}

 					modifiedCharArr[index++] = srcCharArr[i + j];
 				}
 				i = i + j;
 			}

 			if (i < length) {
 				modifiedCharArr[index++] = srcCharArr[i];
 			}
 		}

 		response = String.valueOf(modifiedCharArr);
 		return response.trim();
 	}
     
}
